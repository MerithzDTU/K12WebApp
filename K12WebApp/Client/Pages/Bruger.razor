@page "/user"
@page "/user/{id:int}"
@inject IUserService UserService

<!-- Hvis denne klasse hedder "User" så importeres User-Page i K12WebApp.Client og ikke User fra K12WebApp.Shared-->
@if (Id == null)
{
    <PageTitle> Opret en ny bruger</PageTitle>
    <h3> Opret en ny bruger</h3>
}
else
{
    <PageTitle>Redigér @user.FirstName</PageTitle>
    <h3>Redigér @user.FirstName</h3>
}

<EditForm Model="user" OnSubmit="HandleSubmit">
    <div>
        <label for="firstname">Fornavn</label>
        <InputText id="firstname" @bind-Value="user.FirstName" class="form-control"></InputText>
    </div>
    <div>
        <label for="lastname">Efternavn</label>
        <InputText id="lastname" @bind-Value="user.LastName" class="form-control"></InputText>
    </div>
    <div>
        <label for="username">Brugernavn</label>
        <InputText id="username" @bind-Value="user.NickName" class="form-control"></InputText>
    </div>
    <div>
        <label>Rolle</label><br />
        <InputSelect @bind-Value="user.RoleId" class="form-select">
            @foreach (var role in UserService.Roles)
            {
                <option value="@role.Id">@role.Name</option>
            }
        </InputSelect>
    </div>
    <br />
    <button typeof="submit" class="btn btn-primary">@btnText</button>
    <button typeof="button" class="btn btn-danger" @onclick="DeleteUser">Delete User</button>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Gem ny bruger" : "Opdater bruger";
        await UserService.GetRoles();
    }

    User user = new User { Role = new Role() };

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            user.Role = UserService.Roles[0];
            user.RoleId = user.Role.Id;
        }
        else
        {
            user = await UserService.GetUserById((int)Id);
        }
    }

    async Task HandleSubmit()
    {
        if(Id == null)
        {
            await UserService.CreateUser(user);
        }
        else
        {
            await UserService.UpdateUser(user);
        }
    }

    async Task DeleteUser()
    {
        await UserService.DeleteUser(user.Id);
    }
}
