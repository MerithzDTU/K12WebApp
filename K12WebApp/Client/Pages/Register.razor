@page "/register"

@using K12WebApp.Client.Services;
@inject NavigationManager NavigationManager;
@inject IUserService UserService;
@inject IAuthService AuthService;
@inject AuthenticationStateProvider AuthStateProvider;
@inject ISnackbar Snackbar;

<PageTitle>Register</PageTitle>

<AuthorizeView>
    <Authorized>
        <Dashboard>

        </Dashboard>
    </Authorized>

    <NotAuthorized>
        <MudContainer Class="mt-16" MaxWidth="MaxWidth.Small">
            <EditForm Model="@user" Context="RegisterContext" OnValidSubmit="OnValidSubmit">
                <MudPaper Class="center rounded pa-14 mt-1" Elevation="5">
                    <MudText Class="mud-typography-h4" Color="Color.Primary" Align="Align.Center">Køkken 12.</MudText>
                    <div class="d-flex justify-center">
                        <MudIcon Icon="@Icons.Material.Rounded.Kitchen" Color="Color.Primary" Style="height:50%; width:50%;" />
                    </div>


                    <MudGrid>
                        <MudItem xs="12">
                            <MudGrid Class="mt-10">
                                <!-- FirstName -->
                                <MudItem xs="12" md="6" lg="6" xl="6">
                                    <MudTextField Label="First name"
                                                  @bind-value="user.FirstName"
                                                  Placeholder="Mette"
                                                  For="@(() => user.FirstName)"
                                                  Variant="Variant.Outlined" />
                                </MudItem>
                                <!-- LastName -->
                                <MudItem xs=12 md="6" lg="6" xl="6">
                                    <MudTextField Label="Last name"
                                                  @bind-value="user.LastName"
                                                  Placeholder="Geza"
                                                  For="@(() => user.LastName)"
                                                  Variant="Variant.Outlined" />
                                </MudItem>
                                <!-- Email -->
                                <MudItem xs=12>
                                    <MudTextField Label="Email"
                                                  @bind-value="user.Email"
                                                  Placeholder="Your email address"
                                                  For="@(() => user.Email)"
                                                  Variant="Variant.Outlined" />
                                </MudItem>
                                <!-- Username -->
                                <MudItem xs=12>
                                    <MudTextField Label="Username"
                                                  @bind-value="user.NickName"
                                                  Placeholder="Bruges til at logge ind med"
                                                  For="@(() => user.NickName)"
                                                  Variant="Variant.Outlined" />
                                </MudItem>
                                <!-- Password -->
                                <MudItem xs=12>
                                    <MudTextField Label="Password"
                                                  @bind-value="user.Password"
                                                  Placeholder=""
                                                  InputType="InputType.Password"
                                                  For="@(() => user.Password)"
                                                  Variant="Variant.Outlined"
                                                  Adornment="Adornment.End"
                                                  AdornmentColor="Color.Primary"
                                                  AdornmentIcon="@PasswordInputIcon"
                                                  OnAdornmentClick="ButtonPasswordToggle" />
                                </MudItem>

                                <!-- Register button -->
                                <MudItem xs="12">
                                    <MudButton ButtonType="ButtonType.Submit"
                                               Variant="Variant.Filled"
                                               Color="Color.Primary"
                                               Size="Size.Large"
                                               Class="rounded-lg"
                                               Style="width: 100%; height: 50px;">
                                        Registrér
                                    </MudButton>
                                </MudItem>
                                <MudItem>
                                    <MudText Typo="Typo.body2">Har du allerede en bruger?</MudText>
                                    <MudLink Href="/login" Typo="Typo.body2">  Log ind her.</MudLink>
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </EditForm>
        </MudContainer>
    </NotAuthorized>
</AuthorizeView>
@code {
    private UserRegisterDto user = new UserRegisterDto();

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private void ButtonPasswordToggle()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private async Task OnValidSubmit()
    {
        await HandleSubmit();
        StateHasChanged();
    }

    private async Task HandleSubmit()
    {
        try
        {
            Console.WriteLine(user.ToString());
            var response = await AuthService.RegisterUser(user);

            // CONDITION: STATUSCODE == OK
            if (response.StatusCode == System.Net.HttpStatusCode.OK)
            {
                snackBarConf();
                Snackbar.Add("User is created. Proceed to log in", Severity.Success);
                NavigationManager.NavigateTo("login");

            }
            // CONDITION: STATUSCODE == CONFLICT
            if (response.StatusCode == System.Net.HttpStatusCode.Conflict)
            {
                snackBarConf();
                Snackbar.Add("User already exists.", Severity.Error);
            }

            // CONDITION: STATUSCODE == BADREQUEST
            if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                snackBarConf();
                Snackbar.Add("Failed to create user", Severity.Error);
            }

        }
        catch (Exception e)
        {
            Console.WriteLine("Register Exception caught: " + e.Message);
        }
    }

    public void snackBarConf()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
        Snackbar.Configuration.SnackbarVariant = Variant.Filled;
        Snackbar.Configuration.VisibleStateDuration = 3000;
    }
}
