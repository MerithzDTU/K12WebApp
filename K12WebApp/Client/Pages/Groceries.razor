@page "/groceries"
@using K12WebApp.Client.Components
@using System.Linq
@using MudBlazor
@using K12WebApp.Client.Helpers
@inject IGroceryService GroceryService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<PageTitle>Indkøb</PageTitle>

<MudContainer Class="mt-16" MaxWidth="MaxWidth.Small">
    <MudPaper Class="center rounded pa-14 mt-1" Elevation="5">

        <MudText Class="mud-typography-h4" Color="Color.Primary" Align="Align.Center">Indkøbsliste</MudText>
        <div class="d-flex justify-center">
            <MudIcon Icon="@Icons.Material.Rounded.ReceiptLong" Color="Color.Primary" Style="height:30%; width:30%;" />
        </div>


        <MudGrid>
            <MudItem xs="12">
                <MudGrid Class="mt-10">
                    <!-- GroceryName -->
                    <MudItem xs="10" md="10" lg="10" xl="10">
                        <MudTextField Label="Ny vare"
                                      Placeholder="Fx. Mel"
                                      @bind-Value="grocery.GroceryName"
                                      For="@(() => grocery.GroceryName)"
                                      Variant="Variant.Outlined" />
                    </MudItem>
                    <!-- Add to list button -->
                    <MudItem xs="2" md="2" lg="2" xl="2">
                        <MudIconButton Icon="@Icons.Material.Outlined.LocalGroceryStore"
                                       @onclick="() => HandleSubmit()"
                                       ButtonType="ButtonType.Submit" aria-label="add"
                                       Color="Color.Success"
                                       Size="Size.Large"
                                       Class="rounded-lg"
                                       Style="width: 100%; height: 100%;"></MudIconButton>
                    </MudItem>
                    <!-- Table -->
                    <MudTable Items="@GetAllGrociersNotBought()" MultiSelection="true" @bind-SelectedItems="selectedItems1" Hover="@hover">
                        <HeaderContent>
                            <MudTh>Varer</MudTh>
                            <MudTh>Tilføjet af</MudTh>
                            <MudTh>Tilføjet</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="grocery">
                            <MudTd DataLabel="Varer">@grocery.GroceryName</MudTd>
                            <MudTd DataLabel="Tilføjet af">@grocery.CreatedByUser.FirstName</MudTd>
                            <MudTd DataLabel="Dato for tilføjelse">@grocery.DateCreated.ToRelativeDate()</MudTd>
                        </RowTemplate>
                        <FooterContent>
                            <MudTd colspan="3">Vælg Alle</MudTd>
                        </FooterContent>
                    </MudTable>
                    <MudButton ButtonType="ButtonType.Submit"
                               Variant="Variant.Filled"
                               @onclick="() => RemoveGrocery(selectedItems1)"
                               Color="Color.Error"
                               Size="Size.Large"
                               Class="rounded-lg"
                               Style="width: 100%; height: 40px;">
                        Fjern Varer
                    </MudButton>
                </MudGrid>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>


@code {
    private Grocery grocery = new Grocery();

    private bool hover = true;

    int intValue = 0;

    private HashSet<Grocery> selectedItems1 = new HashSet<Grocery>();

    private IEnumerable<Grocery> allGroceries = new List<Grocery>();

    protected override async Task OnInitializedAsync()
    {
        await RefreshGroceries();
        Console.WriteLine("Size af listen allGroceries ---> : " + allGroceries.Count());
    }
    private async Task RefreshGroceries()
    {
        await GroceryService.GetGroceries();
        allGroceries = new List<Grocery>(GroceryService.Groceries);
    }

    private IEnumerable<Grocery> GetAllGrociersNotBought()
    {
        return allGroceries.ToList().FindAll((grocery) => !grocery.isBought);
    }

    private async Task RemoveGrocery(HashSet<Grocery> selectedGroceries)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Hvis du bekræfter at de valgte varer er købt, så slettes de fra listen.");
        parameters.Add("ButtonText", "Fjern Varer");
        parameters.Add("Color", Color.Error);
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = DialogService.Show<ModalDialog>("Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            Guid.TryParse(result.Data.ToString(), out Guid deletedGroceries);
            foreach (var grocery in selectedGroceries)
            {
                await BoughtGrocery(grocery);
            }
        }
    }

    private async Task BoughtGrocery(Grocery grocery)
    {
        grocery.isBought = true;
        await GroceryService.UpdateGrocery(grocery);
    }

    private async Task HandleSubmit()
    {
        Console.WriteLine("P1. Grocery is ---->" + grocery.GroceryName);
        grocery.CreatedByUserId = 1;
        grocery.isBought = false;
        await GroceryService.CreateGrocery(grocery);
        await RefreshGroceries();
        grocery.GroceryName = string.Empty;
    }
}
