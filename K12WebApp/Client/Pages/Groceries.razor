@page "/groceries"
@using K12WebApp.Client.Components
@inject IGroceryService GroceryService
@inject NavigationManager NavigationManager

<PageTitle>Indkøb</PageTitle>

<h1>Indkøb</h1>

<EditForm Model="grocery" OnSubmit="HandleSubmit" style="margin:0 auto;">
    <div class="input-group mb-3">
        <InputText id="groceryname" @bind-Value="grocery.GroceryName" style="background-color: #212121; color: navajowhite" class="form-control" placeholder="Indtast Vare"></InputText>
        <button class="btn btn-success" typeof="submit">Tilføj en ny vare</button>
    </div>
</EditForm>
<table style="margin:0 auto" class="table table-dark table-borderless table-hover w-auto">
    <thead style="color: ghostwhite">
        <tr>
            <th></th>
            <th>Varer</th>
            <th>Tilføjet af</th>
            <th>Dato for tilføjelse</th>
        </tr>
    </thead>
    <tbody style="color: antiquewhite">
        @foreach (var grocery in GroceryService.Groceries)
        {
            @if (grocery.isBought == false)
           {
            <tr>
                <td>
                    <!-- This should toggle a ModalDialog-->
                    <input class="form-check-input" type="checkbox" @onchange="() => OpenDeleteDialog(grocery)" />
                </td>
                <td style="color:navajowhite">@grocery.GroceryName</td>
                <td>@grocery.CreatedByUser.NickName</td>
                <td>@grocery.DateCreated</td>
            </tr>
           }
        }
    </tbody>
</table>

@if(DeleteDialogOpen)
{
    <ModalDialog Title="Er du sikker?" Body="Dette vil slette vareren fra indkøbslisen" OnClose="@OnDeleteDialogClose" DialogType="ModalDialog.ModalDialogType.DeleteCancel"></ModalDialog>
}

@code {
    private Grocery _groceryToDelete;

    Grocery grocery = new Grocery();

    public bool DeleteDialogOpen { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GroceryService.GetGroceries();
    }


    private async Task OnDeleteDialogClose(bool accepted)
    {
        if( accepted )
        {
            await BoughtGrocery(_groceryToDelete);
            _groceryToDelete = null;
        }
        DeleteDialogOpen = false;
        StateHasChanged();
    }

    private void OpenDeleteDialog(Grocery grocery)
    {
        DeleteDialogOpen = true;
        _groceryToDelete = grocery;
        StateHasChanged();
    }

    async Task BoughtGrocery(Grocery grocery)
    {
        grocery.isBought = true;
        await GroceryService.UpdateGrocery(grocery);
    }

    async Task HandleSubmit()
    {
        grocery.CreatedByUserId = 1;
        grocery.isBought = false;
        await GroceryService.CreateGrocery(grocery);
    }
}
